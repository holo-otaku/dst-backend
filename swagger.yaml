openapi: 3.0.0
info:
  version: "1.0.0"
  title: Login and Token Refresh API
  description: API for DST

servers:
  - url: http://127.0.0.1:5001
    description: Local server
  - url: http://{host}:{port}/{basePath}
    description: The development API server
    variables:
      host:
        default: "localhost"
      port:
        default: 5000
      basePath:
        default: ""

tags:
  - name: Health
    description: Connection Health
  - name: Login
    description: Operations related to Login
  - name: User
    description: Operations related to user management
  - name: Permission
    description: Operations related to permission management
  - name: Role
    description: Operations related to role management
  - name: Series
    description: Operations related to series management
  - name: Products
    description: Operations related to product management
  - name: Log
    description: Operations related to log management
  - name: Archive
    description: Operations related to Archive management
paths:
  /health:
    get:
      tags:
        - Health
      summary: Connection health
      description: Use this API to test connection health.

      responses:
        "200":
          description: Connection successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Success
        "500":
          description: Internal server error

  /login:
    post:
      tags:
        - Login
      summary: User login
      description: Use this API to authenticate user login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY4Nzc3MDQ2NCwianRpIjoiM2M5OGEyM2ItNWE1NS00ZjUyLWJkODktOTk3NzUwMGU1OTUyIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MSwibmJmIjoxNjg3NzcwNDY0LCJleHAiOjE2ODc3NzIyNjR9.C2r9J4M5jh-XkMIHgg3-mz9Boa1HrWHPHWSyHnL8SYk
                  msg:
                    type: string
                    example: login success
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /jwt/refresh:
    post:
      tags:
        - Login
      summary: Refresh access token
      description: Use this API to refresh the access token.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY4Nzc3MDQ2NCwianRpIjoiM2M5OGEyM2ItNWE1NS00ZjUyLWJkODktOTk3NzUwMGU1OTUyIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MSwibmJmIjoxNjg3NzcwNDY0LCJleHAiOjE2ODc3NzIyNjR9.C2r9J4M5jh-XkMIHgg3-mz9Boa1HrWHPHWSyHnL8SYk
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /user:
    post:
      tags:
        - User
      summary: Create a user
      description: Create a new user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreatePayload"
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Success
                  data:
                    $ref: "#/components/schemas/User"

        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

    get:
      tags:
        - User
      summary: Get multiple users
      description: Retrieve a list of users with pagination support.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          description: Page number for pagination
          schema:
            type: integer
        - in: query
          name: limit
          description: Number of users per page
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  totalCount:
                    type: number
                    example: 87

  /user/{user_id}:
    get:
      tags:
        - User
      summary: Get a user
      description: Retrieve a specific user by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          required: true
          name: user_id
          description: ID of the user to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      userName:
                        type: string
                        example: admin
                      role:
                        type: string
                        example: Administrator
                      roleId:
                        type: number
                        example: 1

    patch:
      tags:
        - User
      summary: Update a user
      description: Update a specific user by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          required: true
          name: user_id
          description: ID of the user to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdatePayload"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Success
                  data:
                    $ref: "#/components/schemas/User"

    delete:
      tags:
        - User
      summary: Delete a user
      description: Delete a specific user by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          required: true
          name: user_id
          description: ID of the user to delete
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: User deleted

  /permission:
    post:
      tags:
        - Permission
      summary: Create a permission
      description: Create a new permission.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PermissionCreatePayload"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Permission created
                  data:
                    properties:
                      id:
                        type: number
                        example: 1
                      name:
                        type: string
                        example: read

        "400":
          description: Bad Request
        "500":
          description: Internal Server Error

    get:
      tags:
        - Permission
      summary: Get multiple permissions
      description: Retrieve a list of permissions with pagination support.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          description: Page number for pagination
          schema:
            type: integer
        - in: query
          name: limit
          description: Number of permissions per page
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Permission found
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Permission"
                  totalCount:
                    type: number
                    example: 87

  /permission/{permission_id}:
    get:
      tags:
        - Permission
      summary: Get a permission
      description: Retrieve a specific permission by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          required: true
          name: permission_id
          description: ID of the permission to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Permission found
                  data:
                    $ref: "#/components/schemas/Permission"

    patch:
      tags:
        - Permission
      summary: Update a permission
      description: Update a specific permission by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          required: true
          name: permission_id
          description: ID of the permission to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PermissionUpdatePayload"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Permission updated

    delete:
      tags:
        - Permission
      summary: Delete a permission
      description: Delete a specific permission by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          required: true
          name: permission_id
          description: ID of the permission to delete
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Permission deleted

  /role:
    get:
      tags:
        - Role
      summary: Get multiple roles
      description: Retrieve a list of roles with pagination support.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          description: Page number for pagination
          schema:
            type: integer
        - in: query
          name: limit
          description: Number of roles per page
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Role"
                  totalCount:
                    type: number
                    example: 87

    post:
      tags:
        - Role
      summary: Create a role
      description: Create a new role with the given data.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleCreatePayload"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Role created
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1

  /role/{role_id}:
    get:
      tags:
        - Role
      summary: Get a role
      description: Retrieve a specific role by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          required: true
          name: role_id
          description: ID of the role to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Success
                  data:
                    $ref: "#/components/schemas/Role"

    patch:
      tags:
        - Role
      summary: Update a role
      description: Update a specific role by ID with the given data.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          required: true
          name: role_id
          description: ID of the role to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleUpdatePayload"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Role updated

    delete:
      tags:
        - Role
      summary: Delete a role
      description: Delete a specific role by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          required: true
          name: role_id
          description: ID of the role to delete
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Role deleted

  /series:
    get:
      tags:
        - Series
      summary: Get multiple series
      description: Retrieve a list of series with pagination support.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: keyword
          description: keyword for fuzzy search
          schema:
            type: string
        - in: query
          name: page
          description: Page number for pagination
          schema:
            type: integer
        - in: query
          name: limit
          description: Number of series per page
          schema:
            type: integer
        - in: query
          name: showField
          description: Detail of series
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Success
                  totalCount:
                    type: number
                    example: 87
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SeriesMulti"

    post:
      tags:
        - Series
      summary: Create a series
      description: Create a new series with the given data.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SeriesCreatePayload"
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Series created

  /series/{series_id}:
    get:
      tags:
        - Series
      summary: Get a series
      description: Retrieve a specific series by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          required: true
          name: series_id
          description: ID of the series to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Success
                  data:
                    $ref: "#/components/schemas/Series"

    patch:
      tags:
        - Series
      summary: Update a series
      description: Update a specific series by ID with the given data.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          required: true
          name: series_id
          description: ID of the series to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SeriesUpdatePayload"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Series updated

    delete:
      tags:
        - Series
      summary: Delete a series
      description: Delete a specific series by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          required: true
          name: series_id
          description: ID of the series to delete
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Series deleted

  /product:
    post:
      tags:
        - Products
      summary: Create a product
      description: Create a new product with the given data.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  seriesId:
                    type: integer
                  attributes:
                    type: array
                    items:
                      type: object
                      properties:
                        fieldId:
                          type: integer
                        value:
                          oneOf:
                            - type: string
                            - type: number
                            - type: boolean
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  msg:
                    type: string
                    example: Success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        seriesId:
                          type: integer
                          example: 1

  /product/copy:
    post:
      tags:
        - Products
      summary: Copy products by itemIds
      description: Copy one or more existing items by their IDs, duplicating attributes and handling picture fields accordingly.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemIds:
                  type: array
                  items:
                    type: integer
              required:
                - itemIds
              example:
                itemIds: [1, 2, 3]
      responses:
        "201":
          description: Items copied successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  msg:
                    type: string
                    example: Success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 101
                        seriesId:
                          type: integer
                          example: 1
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  msg:
                    type: string
                    example: itemIds must be a list
        "404":
          description: One of the source items not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 404
                  msg:
                    type: string
                    example: Item 123 not found

  /product/{product_id}:
    get:
      tags:
        - Products
      summary: Get a product
      description: Retrieve a specific product by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          required: true
          name: product_id
          description: ID of the product to retrieve
          schema:
            type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Success
                  data:
                    $ref: "#/components/schemas/Product"

  /product/search:
    post:
      tags:
        - Products
      summary: Search products in a series
      description: Search for products in a specific series based on the provided filter criteria.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          description: Page number for pagination
          schema:
            type: integer
        - in: query
          name: limit
          description: Number of per page
          schema:
            type: integer
        - in: query
          name: order
          description: Order of Field
          schema:
            type: string
            example: 11,asc
            enum:
              - 11,asc
              - 11,desc
      requestBody:
        description: Filter criteria for product search
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                seriesId:
                  type: number
                filter:
                  type: array
                  items:
                    type: object
                    properties:
                      fieldId:
                        type: integer
                      value:
                        type: string
                      operation:
                        type: string
                        enum:
                          - equals
                          - greater
                          - less
                isDeleted:
                  type: number
                  enum:
                    - 0
                    - 1
                isArchived:
                  type: number
                  enum:
                    - 0
                    - 1

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Success
                  totalCount:
                    type: number
                    example: 87
                  data:
                    $ref: "#/components/schemas/Product"

  /product/export:
    post:
      tags:
        - Products
      summary: Export products in a series to Excel
      description: Export the filtered products of a specific series to an Excel file.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: order
          description: Order by field
          schema:
            type: string
            example: 11,asc
      requestBody:
        description: Filter criteria for product export
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                seriesId:
                  type: number
                filter:
                  type: array
                  items:
                    type: object
                    properties:
                      fieldId:
                        type: integer
                      value:
                        type: string
                      operation:
                        type: string
                        enum:
                          - equals
                          - greater
                          - less
      responses:
        "200":
          description: Excel download
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  msg:
                    type: string
        "404":
          description: Series not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  msg:
                    type: string

  /product/edit:
    patch:
      tags:
        - Products
      summary: Edit products
      description: Edit multiple products with the given data.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  itemId:
                    type: integer
                  attributes:
                    type: array
                    items:
                      type: object
                      properties:
                        fieldId:
                          type: integer
                        value:
                          oneOf:
                            - type: string
                            - type: number
                            - type: boolean
                  isDeleted:
                    type: number
                    enum:
                      - 0
                      - 1
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: ItemAttributes updated

  /product/delete:
    delete:
      tags:
        - Products
      summary: Delete products
      description: Delete multiple products based on the provided data.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemId:
                  type: array
                  items:
                    type: integer
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Items deleted

  /log:
    get:
      tags:
        - Log
      summary: List logs
      description: List logs
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          description: Page number for pagination
          schema:
            type: integer
        - in: query
          name: limit
          description: Number of per page
          schema:
            type: integer

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Success
                  data:
                    $ref: "#/components/schemas/Log"

  /log/user/{user_id}:
    get:
      tags:
        - Log
      summary: List user logs
      description: List user logs
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          description: Page number for pagination
          schema:
            type: integer
        - in: query
          name: limit
          description: Number of per page
          schema:
            type: integer

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Success
                  data:
                    $ref: "#/components/schemas/Log"

  /archive:
    post:
      tags:
        - Archive
      summary: Archive operation
      description: Add multiple Archives
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemIds:
                  type: array
                  items:
                    type: integer
                  example: [87, 88, 89]
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Archived 2 items, skipped 1 duplicates
                  data:
                    type: object
                    properties:
                      skipped:
                        type: array
                        items:
                          type: integer
                        example: [88]

    delete:
      tags:
        - Archive
      summary: Delete multiple Archives
      description: Delete archive records by multiple itemIds
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemIds:
                  type: array
                  items:
                    type: integer
                  example: [87, 88, 89]
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Deleted 2 items, 1 not found
                  data:
                    type: object
                    properties:
                      deleted:
                        type: array
                        items:
                          type: integer
                        example: [87, 88]
                      notFound:
                        type: array
                        items:
                          type: integer
                        example: [89]

  /field/item_attribute/search:
    get:
      tags:
        - Field
      summary: Search ItemAttribute by field_id and value
      description: Retrieve a list of ItemAttributes matching the given field_id and fuzzy search value.
      parameters:
        - in: query
          name: field_id
          description: ID of the field to search within
          required: true
          schema:
            type: integer
        - in: query
          name: search_value
          description: Value to fuzzy search for within ItemAttribute values
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  msg:
                    type: string
                    example: Success
                  data:
                    type: array
                    items:
                      type: string
                      example: "sample_value"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  msg:
                    type: string
                    example: Missing field_id or search_value
                  data:
                    type: array
                    items: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 500
                  msg:
                    type: string
                    example: Internal server error message
                  data:
                    type: array
                    items: {}

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userName:
          type: string
          example: admin
        role:
          type: string
          example: Administrator

    UserCreatePayload:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        roleId:
          type: integer

    UserUpdatePayload:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        roleId:
          type: integer

    Permission:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: read

    PermissionCreatePayload:
      type: object
      properties:
        name:
          type: string

    PermissionUpdatePayload:
      type: object
      properties:
        name:
          type: string

    Role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Admin
        permissions:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: Admin

    RoleCreatePayload:
      type: object
      properties:
        roleName:
          type: string
        permissionIds:
          type: array
          items:
            type: integer

    RoleUpdatePayload:
      type: object
      properties:
        roleName:
          type: string
        permissionIds:
          type: array
          items:
            type: integer

    Series:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Series 1
        fields:
          type: array
          items:
            type: object
            properties:
              dataType:
                type: string
                example: string
              id:
                type: number
                example: 87
              isFiltered:
                type: boolean
                example: true
              isRequired:
                type: boolean
                example: false
              isErp:
                type: boolean
                example: false
              searchErp:
                type: boolean
                example: false
              name:
                type: string
                example: PORT數
              value:
                type: array
                items:
                  example: 1 x 1
                example: Series 1
              sequence:
                type: number
                example: 1

    SeriesMulti:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Series 1
        fields:
          type: array
          items:
            type: object
            properties:
              dataType:
                type: string
                example: string
              id:
                type: number
                example: 87
              isFiltered:
                type: boolean
                example: true
              isRequired:
                type: boolean
                example: false
              isErp:
                type: boolean
                example: false
              searchErp:
                type: boolean
                example: false
              name:
                type: string
                example: PORT數

    SeriesCreatePayload:
      type: object
      properties:
        name:
          type: string
        fields:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              dataType:
                type: string
                enum:
                  - string
                  - number
                  - boolean
                  - datetime
                  - picture
              isFiltered:
                type: integer
              isRequired:
                type: integer
              isErp:
                type: integer
              isLimitField:
                type: integer
              searchErp:
                type: integer

    SeriesUpdatePayload:
      type: object
      properties:
        name:
          type: string
        fields:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              name:
                type: string
              dataType:
                type: string
              isFiltered:
                type: integer
              isRequired:
                type: integer
              isLimitField:
                type: integer
              searchErp:
                type: integer
              sequence:
                type: integer
        create:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              dataType:
                type: string
              isFiltered:
                type: integer
              isRequired:
                type: integer
              isLimitField:
                type: integer
              searchErp:
                type: integer
              sequence:
                type: integer
        delete:
          type: array
          items:
            type: integer

    Product:
      type: array
      items:
        type: object
        properties:
          itemId:
            type: integer
            example: 1
          seriesId:
            type: integer
            example: 1
          hasArchive:
            type: boolean
            example: false
          attributes:
            type: array
            items:
              $ref: "#/components/schemas/Attribute"
          erp:
            type: array
            items:
              type: object
              properties:
                key:
                  type: string
                  example: 廠商編號
                value:
                  type: string
                  example: Field Value

    Attribute:
      type: object
      properties:
        fieldId:
          type: string
          example: "1"
        fieldName:
          type: string
          example: "料號"
        dataType:
          type: string
          example: "string"
        value:
          type: string
          example: Field Value

    Log:
      type: array
      items:
        type: object
        properties:
          userId:
            type: integer
            example: 1
          userName:
            type: string
            example: "Pekora"
          url:
            type: string
            example: /product/search
          method:
            type: string
            example: GET
          payload:
            type: object
            example:
              { "filters": [{ "fieldId": 13, "value": "精和" }], "seriesId": 4 }
          id:
            type: integer
            example: 1
          createdAt:
            type: string
            example: 2023-08-25 15:28:42
